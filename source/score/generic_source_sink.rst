Generic Source & Sink
=====================

This introductory example shows how to use the generic source and sink classes.
No data is transmitted over the network, and the source and sink objects are
parts of the same program for the sake of simplicity. This example can be a
starting point if you want to integrate score into an application that
already has a custom socket framework.

The complete example is shown below.

.. literalinclude:: /../../score/examples/pure_source_sink/pure_source_sink.cpp
    :language: c++
    :linenos:

First we create a ``manual_source`` and a ``sink`` object. The manual source
allows us to configure each protocol parameter manually, whereas the
``auto_sender`` class can automatically adjust various protocol parameters
using automatic controllers. In this example, we use the manual source with
the ``stream`` profile which is optimized for low delay.

After the initialization, we generate a small number of random messages and we
push each message to the source using the ``read_message`` function. The source
transforms these user messages into outgoing data packets and we retrieve these
packets with the ``write_data_packet`` function. Of course, these packet buffers
could be transmitted over the network using any socket interface, but in this
example we immediately forward these to the sink using ``read_data_packet``.

The sink might generate SNACK packets to provide feedback to the source.
We get these packets from the sink using ``write_snack_packet``, and
then they are delivered to the source using ``read_snack_packet``.

After processing all packets generated by the source, the sink should have all
the original messages available. We retrieve these messages in order using
the ``sink.write_message`` function and we also verify the decoded messages
against the original data.

In a real application, this interaction between the source and sink objects
can be realized with an asynchronous socket interface. The receiver socket
should listen for data packets that should be passed to the sink and the same
socket can be used to transmit SNACK packets back to the source. Therefore
the sender socket should also continuously listen for these feedback packets,
and the source might generate additional data packets reacting to the feedback.
